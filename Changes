Revision history for Perl extension Plift

{{$NEXT}}

    [ PERFORMANCE ]
    * avoid calling Path::Tiny realpath + subsumes
      - only if template name has '../'
    * builtin handlers now calling attribute-related methods directly on libxml node
      - I know.. micro optimization.. just a NYTProf itch.
    * resolving relative path prefix only when template name is relative :)

    [ BUG FIX ]
    * fixed relative path resolution
      - now properly localizing current file/path



0.05 2016-07-23T02:34:37Z

    * added support for inline template
      - pass a scalarref with html source instead of template name
      - needed since not all applications stores the templates as files
    * added URI dep
    * implemented "data-plift-template" feature
      - a body attribute pointing to the actual template element,
      - used by load_template() method


0.04 2016-07-21T04:14:15Z

    * implemented 'wrapper' option
      - a template used for final wrapper, usually the website layout
      - avoids '<x-wrap>' on every template file
    * implemented context 'helper'
      - optional object of which methods get AUTOLOADed from
      - meant as a gateway from Plift to the rest of the system
        - (e.g. the current web request controller instance)

    * implemented snippets: dynamically loaded code blocks
    * renamed option 'path' to 'paths'

0.03 2016-07-20T19:09:47Z

    - implemented Plift::render(), Plift::load_components()
    - added a little more documentation

0.02 2016-07-18T22:12:26Z

    - implemented <x-render> processing instructions
      - creates render directives dynamically
    - implemented match modifiers to append+, +prepend and ^replace the element
      - like Template::Pure

    - added manual pages
      - Plift::Manual::Tutorial
      - Plift::Manual::DesignerFriendly
      - Plift::Manual::Inception
      - Plift::Manual::CustomHandler


0.01 2016-07-12T00:47:33Z

    - first released version, includes all basic features:
      - include and wrap templates
      - render data via pre-defined directives
      - render data via references found in templates
      - load plugins
      - add custom handlers
